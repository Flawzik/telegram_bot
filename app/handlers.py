from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from aiogram.types import ReplyKeyboardRemove
from aiogram.exceptions import TelegramBadRequest  
from contextlib import closing
import logging
import sqlite3
import app.keyboards as kb
from app.database import (
    add_user,
    save_profile,
    get_profile,
    get_random_profile,
    add_like,
    check_match,
    add_match,
    get_likes_with_messages,
    DATABASE_NAME
)

router = Router()

class Reg(StatesGroup):
    name = State()
    age = State()
    sex = State()
    bio = State()
    city = State()
    whoyouwan = State()
    photo = State()

class SuperLikeState(StatesGroup):
    message = State()

@router.message(CommandStart())
async def reg_one(message: Message, state: FSMContext):
    add_user(message.from_user.id, 
           message.from_user.username,
           message.from_user.full_name)
    
    if get_profile(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)
        return
    
    await state.set_state(Reg.name)
    await message.answer("üëã –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.age)
    await message.answer('üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')

@router.message(Reg.age)
async def handle_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    age = int(message.text)
    await state.update_data(age=age)
    await state.set_state(Reg.sex)
    await message.reply('üë´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=kb.sex)

@router.message(Reg.sex)
async def reg_three(message: Message, state: FSMContext):
    await state.update_data(sex=message.text)
    await state.set_state(Reg.bio)
    await message.answer('üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:', reply_markup=ReplyKeyboardRemove())

@router.message(Reg.bio)
async def reg_four(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await state.set_state(Reg.city)
    await message.answer('üåç –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?')

@router.message(Reg.city)
async def reg_five(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Reg.whoyouwan)
    await message.answer('‚ùî –ö—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?', reply_markup=kb.whoyowan)

@router.message(Reg.whoyouwan)
async def handle_preferences(message: Message, state: FSMContext):
    valid = {'male', 'female', 'any'}
    
    
    user_input = message.text.lower()
    
   
    if user_input not in valid:
        await message.answer("üö´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!")
        return
    
    
    await state.update_data(preferences=user_input)
    await state.set_state(Reg.photo)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", reply_markup=ReplyKeyboardRemove())


@router.message(Reg.photo, F.content_type.in_({ContentType.PHOTO, ContentType.VIDEO}))
async def handle_media(message: Message, state: FSMContext):
    data = await state.get_data()
    
    if message.content_type == ContentType.PHOTO:
        media = message.photo[-1].file_id
        media_type = 'photo'
    else:
        media = message.video.file_id
        media_type = 'video'
    
    profile_data = {
        'name': data['name'],
        'age': data['age'],
        'gender': data['sex'],
        'city': data['city'],
        'bio': data['bio'],
        'preferences': data['whoyouwan'],
        'media': media,
        'media_type': media_type
    }
    
    save_profile(message.from_user.id, profile_data)
    await state.clear()
    
    if media_type == 'photo':
        await message.answer_photo(
            photo=media,
            caption=f"{data['name']}, {data['age']}, {data['city']}\n{data['bio']}",
            reply_markup=kb.main
        )
    else:
        await message.answer_video(
            video=media,
            caption=f"{data['name']}, {data['age']}, {data['city']}\n{data['bio']}",
            reply_markup=kb.main
        )
def save_profile(user_id, profile_data):
    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        c = conn.cursor()
        c.execute('''INSERT OR REPLACE INTO profiles 
                  (user_id, name, age, gender, city, bio, media, media_type, preferences)
                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                  (user_id, 
                   profile_data['name'],
                   profile_data['age'],
                   profile_data['gender'],
                   profile_data['city'],
                   profile_data['bio'],
                   profile_data['media'],
                   profile_data['media_type'],
                   profile_data['preferences']))
        conn.commit()

@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§')    
async def my_prof(message: Message):
    profile = get_profile(message.from_user.id)
    if profile:
        _, _, name, age, _, city, bio, media, media_type, _ = profile
        
        try:
            if media_type == 'photo':
                await message.answer_photo(
                    photo=media,
                    caption=f"{name}, {age}\n{city}\n\n{bio}",
                    reply_markup=kb.main
                )
            else:
                await message.answer_video(
                    video=media,
                    caption=f"{name}, {age}\n{city}\n{bio}",
                    reply_markup=kb.main
                )
        except TelegramBadRequest:
            await message.answer("‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –∞–Ω–∫–µ—Ç—É!")
    else:
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç—É!")

@router.message(F.text == '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üíû')    
async def roum_prof(message: Message):
    current_profile = get_profile(message.from_user.id)
    if not current_profile:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!")
        return

    
    *_, preferences = current_profile  

    
    profile = get_random_profile(
        current_user_id=message.from_user.id,
        current_preferences=preferences
    )

    if profile:
        *_, gender, city, bio, media, _ = profile
        await message.answer_photo(
            photo=media,
            caption=f"{gender} üë§\n{city}\n\n{bio}",
            reply_markup=kb.react
        )
    else:
        await message.answer("üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç")

@router.message(F.text == 'üíå')
async def start_superlike(message: Message, state: FSMContext):
    profile = get_random_profile(message.from_user.id)
    if profile:
        await state.update_data(target_id=profile[1])
        await state.set_state(SuperLikeState.message)
        await message.answer("üíå –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∞–π–∫–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(SuperLikeState.message)
async def save_superlike(message: Message, state: FSMContext):
    data = await state.get_data()
    target_id = data['target_id']
    
    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        c = conn.cursor()
        c.execute('INSERT INTO likes (liker_id, target_id) VALUES (?, ?)', 
                 (message.from_user.id, target_id))
        like_id = c.lastrowid
        
        c.execute('INSERT INTO like_messages (like_id, message) VALUES (?, ?)',
                 (like_id, message.text))
        conn.commit()
    
    await message.answer("üíå –õ–∞–π–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb.main)
    await state.clear()
''' 
@router.message(F.text == '–ú–æ–∏ –ª–∞–π–∫–∏ üíå')
async def show_likes(message: Message):
    likes = get_likes_with_messages(message.from_user.id)
    if likes:
        for like in likes:
            _, name, message_text = like
            msg = f"‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç {name}"
            if message_text:
                msg += f"\nüíå –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
            await message.answer(msg)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤ üòî")
'''
@router.message(F.text == '–ü–æ–¥–ø–∏—Å–∫–∞ üëë')    
async def pay_subscription(message: Message):
    await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞', reply_markup=kb.menu)

@router.message(F.text == '‚¨ÖÔ∏è')    
async def go_back(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
